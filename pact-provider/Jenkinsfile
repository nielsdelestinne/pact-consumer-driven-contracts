pipeline {
    agent any

    environment {
        RELEASE_VERSION = "${sh(returnStdout: true, script: "git rev-list HEAD --count").trim()}"
        PACT_TAG_NAME = getPactTag()
        BRANCH_WITHOUT_PACT_TAG = env.GIT_BRANCH.replaceAll(/^.*\/((LMAC-.*|master)$)/, '$1').replaceAll('_'+PACT_TAG_NAME, '')
        PROVIDER_VERSION = "${RELEASE_VERSION}-${BRANCH_WITHOUT_PACT_TAG}"
    }

    stages {
        stage('Build') {
            steps {
                withMaven(maven: 'mvn') {
                    dir('pact-provider') {
                        sh 'mvn clean install -DskipTests'
                    }
                }
            }
        }
        stage('Test & Provider Test Publish Verification Report') {
            steps {
                withMaven(maven: 'mvn') {
                    dir('pact-provider') {
                        sh "mvn test -Dpact.provider.version=${PROVIDER_VERSION} -Dpactbroker.host=broker_app -Dpactbroker.port=9292 -Dpactbroker.tags=${getPactTagIfValid('master')}"
                    }
                }
            }
        }
    }
}

def getPactTagSuffix() {
    return 'PACT_TAG_'
}
def getInvalidPactTagSuffix() {
    return 'INVALID'
}

def getPactTagIfValid(defaultTag) {
    if(isValidPactTag) {
        return getPactTag()
    }
    return defaultTag
}

def getPactTag() {
    if(env.GIT_BRANCH.contains(getPactTagSuffix())) {
        return env.GIT_BRANCH.replaceAll(/^.*(${getPactTagSuffix()}.*$)/, '$1')
    }
    return getInvalidPactTagSuffix()
}

def isValidPactTag() {
    return !getPactTag().equals(getInvalidPactTagSuffix())
}